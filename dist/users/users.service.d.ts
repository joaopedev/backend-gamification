import { CreateUserDto } from './dto/create-user.dto';
import { UpdateUserDto } from './dto/update-user.dto';
import { Users } from './entities/user.entity';
import { Repository } from 'typeorm';
export declare class UsersService {
    private readonly userRepository;
    constructor(userRepository: Repository<Users>);
    create(createUserDto: CreateUserDto): Promise<{
        id: number;
        name: string;
        username: string;
        confirm_password: string;
        email: string;
        image_url: string;
        updated_at: Date;
        created_at: Date;
        deleted_at?: Date | null;
        stickers_number: number;
        coins: number;
        conquests: number;
        transactions: import("../coin-transaction/entities/coin-transaction.entity").CoinTransaction[];
        initiatedTrades: import("../trades/entities/trade.entity").Trade[];
        receivedTrades: import("../trades/entities/trade.entity").Trade[];
        last_login?: Date | null;
        level: number;
        friends: Users[];
        stickerPacks: import("../sticker-pack/entities/sticker-pack.entity").StickerPack[];
        userStickers: import("../user-stickers/entities/user-sticker.entity").UserSticker[];
        resetPasswordToken: string;
        resetPasswordExpires: Date;
        albums: import("../user-stickers/entities/user-sticker.entity").UserSticker[];
    }>;
    findAll(): Promise<{
        id: number;
        name: string;
        username: string;
        confirm_password: string;
        email: string;
        image_url: string;
        updated_at: Date;
        created_at: Date;
        deleted_at?: Date | null;
        stickers_number: number;
        coins: number;
        conquests: number;
        transactions: import("../coin-transaction/entities/coin-transaction.entity").CoinTransaction[];
        initiatedTrades: import("../trades/entities/trade.entity").Trade[];
        receivedTrades: import("../trades/entities/trade.entity").Trade[];
        last_login?: Date | null;
        level: number;
        friends: Users[];
        stickerPacks: import("../sticker-pack/entities/sticker-pack.entity").StickerPack[];
        userStickers: import("../user-stickers/entities/user-sticker.entity").UserSticker[];
        resetPasswordToken: string;
        resetPasswordExpires: Date;
        albums: import("../user-stickers/entities/user-sticker.entity").UserSticker[];
    }[]>;
    findOne(id: number): Promise<{
        id: number;
        name: string;
        username: string;
        confirm_password: string;
        email: string;
        image_url: string;
        updated_at: Date;
        created_at: Date;
        deleted_at?: Date | null;
        stickers_number: number;
        coins: number;
        conquests: number;
        transactions: import("../coin-transaction/entities/coin-transaction.entity").CoinTransaction[];
        initiatedTrades: import("../trades/entities/trade.entity").Trade[];
        receivedTrades: import("../trades/entities/trade.entity").Trade[];
        last_login?: Date | null;
        level: number;
        friends: Users[];
        stickerPacks: import("../sticker-pack/entities/sticker-pack.entity").StickerPack[];
        userStickers: import("../user-stickers/entities/user-sticker.entity").UserSticker[];
        resetPasswordToken: string;
        resetPasswordExpires: Date;
        albums: import("../user-stickers/entities/user-sticker.entity").UserSticker[];
    }>;
    update(id: number, updateUserDto: UpdateUserDto): Promise<{
        id: number;
        name: string;
        username: string;
        confirm_password: string;
        email: string;
        image_url: string;
        updated_at: Date;
        created_at: Date;
        deleted_at?: Date | null;
        stickers_number: number;
        coins: number;
        conquests: number;
        transactions: import("../coin-transaction/entities/coin-transaction.entity").CoinTransaction[];
        initiatedTrades: import("../trades/entities/trade.entity").Trade[];
        receivedTrades: import("../trades/entities/trade.entity").Trade[];
        last_login?: Date | null;
        level: number;
        friends: Users[];
        stickerPacks: import("../sticker-pack/entities/sticker-pack.entity").StickerPack[];
        userStickers: import("../user-stickers/entities/user-sticker.entity").UserSticker[];
        resetPasswordToken: string;
        resetPasswordExpires: Date;
        albums: import("../user-stickers/entities/user-sticker.entity").UserSticker[];
    }>;
    remove(id: number): Promise<{
        message: string;
    }>;
}
